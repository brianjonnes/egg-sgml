Versioning

Each of the numbered directories represents a standardized interface. All of them will be maintained as long as there is a chance that they are in use. New projects must use the highest numbered directory (in .htaccess). Upgrades can be partial, but the ramifications of included files must be understood.

Any change to the main branch, besides changes to the demo pages, the samples, and minor documentation corrections, will be counted as a release. The major version, 1, is tied to the main branch of this repo; minor is the update count as mentioned.

Escaping is not the opposite of parsing.

We escape a string to ensure that it is unambiguously parsable. In general this merely involves replacing a character with an encoding. It is important to remember that the replacement is not always necessary. For instance, the string /list?opt1=%&opt2=% is perfectly unambiguous to a url parser, as the percent must be followed by two hexadecimal digits (or five for unicode). But to escape, the simplest rule is to always encode. Thus escaping is most commonly represented as a sequence of str_replace (or similar).

In HTML we will usually be escaping '&' and '<', or '&' and '"'; the former for text, the latter for quoted attribute values. We have no need to generate unquoted attribute values. Thus we have a pair of routines: sr_amp_lt and sr_amp_quot ('sr' standing for string-replace).

Url escaping depends on context. Attribute names cannot have '=' but values can, for instance. There is no rule preventing an http client from sending '#' to the server in a request, but spaces must be escaped. A '#' in an href attribute will not be sent to the server, but spaces will be encoded by the web browser. As far as i know, we do not know whether a web server aught to respond to these queries identically:
GET /url# HTTP/1.1
GET /url%2B HTTP/1.1

In this state of things the only url escaping routine that is used requires a list of characters (except '%') which must be escaped.

